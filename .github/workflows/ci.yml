---
name: CI-Builder

on:
  # Trigger at every push. Action will also be visible from Pull Requests to main
  push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions)
    paths-ignore:
      - "**/esg_oracle"
  # pull_request:
  #   branches: [master, develop]

env:
  IMAGE_REPO: 5irechain
  IMAGE_VERSION: ${{ github.event.release.tag_name }}
  IMAGE_NAME: "node-5ire"
  CARGO_NET_GIT_FETCH_WITH_CLI: true

concurrency:
  group: ${{ github.actor }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  ##################################################
  # Lint the whole Rust codebase using Mega Linter #
  ##################################################
  clippy_check:
    runs-on: [self-hosted, mega-runner]
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: reviewdog/action-setup@v1
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: "${{ secrets.DEPLOY_KEY }}"
      - run: |
          if ! git config --get --global url.git@github.com:.insteadof https://github.com 2>&1 > /dev/null; then
            git config --global url.git@github.com:.insteadOf https://github.com/
          fi
      - uses: Swatinem/rust-cache@v1
      - run: |
          eval $(ssh-agent)
          ssh-add $HOME/.ssh/id_rsa
          cargo clippy --message-format=short | reviewdog -f=clippy -reporter=github-pr-check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Test the Rust code
      #   run: cargo --config net.git-fetch-with-cli=true -Z unstable-options test --release

  ######################################################
  # Lint the whole non Rust codebase using Mega Linter #
  ######################################################
  megalint:
    name: Mega-Linter
    runs-on: [self-hosted, small-runner]
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Lint Rest of Codebase
        id: ml
        # You can override Mega-Linter flavor used to have faster performances
        # More info at https://megalinter.github.io/flavors/
        uses: megalinter/megalinter@main
        env:
          # Apply linter fixes configuration
          APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
          APPLY_FIXES_EVENT: all # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
          APPLY_FIXES_MODE: pull_request # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)
          ACTION_ACTIONLINT_DISABLE_ERRORS: true

          # All available variables are described in documentation
          # https://megalinter.github.io/configuration/
          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          DISABLE: COPYPASTE, SPELL # Uncomment to disable copy-paste and spell checks
          DISABLE_LINTERS: DOCKERFILE_DOCKERFILELINT,SPELL_MISSPELL,SPELL_CSPELL,YAML_PRETTIER,YAML_YAMLLINT,YAML_V8R,JSON_JSONLINT,JSON_ESLINT_PLUGIN_JSONC,JSON_V8R,JSON_PRETTIER,RUST_CLIPPY,GIT_GIT_DIFF
      # Upload Mega-Linter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Mega-Linter reports
          path: |
            report
            mega-linter.log
      # Clean the workspace before changing branches or doing any of below git actions
      - name: Clean workspace
        if: ${{ success() }} || ${{ failure() }}
        run: git clean -d -f
      # Create pull request if applicable (for now works only on PR from same repository, not from forks)
      - name: Create Pull Request with applied fixes
        id: cpr
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[Mega-Linter] Apply linters automatic fixes"
          title: "[Mega-Linter] Apply linters automatic fixes"
          labels: bot
          signoff: true
      - name: Create PR output
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
      - name: Commit and push applied linter fixes
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/master' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[Mega-Linter] Apply linters fixes"

  ########################################################################
  # Build and Publish the Docker Image with the latest codebase          #
  # p.s: maybe this can be removed in favour of code_builder             #
  ########################################################################
  artifact_build:
    name: Build the Docker Image
    runs-on: [self-hosted, mega-runner]
    needs: [clippy_check, megalint]
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: "${{ secrets.DEPLOY_KEY }}"

      - name: Docker Build
        id: docker_build
        run: |
          eval $(ssh-agent)
          ssh-add $HOME/.ssh/id_rsa
          docker build --ssh default -f Dockerfile -t ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}} .

      - name: Post Build Steps
        run: |
          echo "Image Digest is $(docker image ls --digests | grep '5irechain/${{ env.IMAGE_NAME}}' | grep 'latest' | grep -o -E 'sha256:[A-Fa-f0-9]{64}')"

  isRelease:
    name: Check if we need to release
    runs-on: [self-hosted, mega-runner]
    needs: artifact_build
    env:
      COMMIT_MSG: "placeholder"
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          # We need to fetch with a depth of 2 for pull_request so we can do HEAD^2
          fetch-depth: 2

        # If this workflow was triggered by a push then resolve the commit message from HEAD
        # It is stored in output steps, to be referenced with ${{ steps.push_get_commit_message.outputs.push_commit_message }}
      - name: "[Push] Get commit message"
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: |
          if git log --format=%B -n 1 HEAD | head -n 1 | grep -q 'release'; then
            git log --format=%B -n 1 HEAD | head -n 1
            COMMIT_MSG=$(git log --format=%B -n 1 HEAD | head -n 1)
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          fi

        # If this workflow was triggered by a pull request (open or synchronize!) then resolve the commit message from HEAD^2
        # It is stored in output steps, to be referenced with ${{ steps.pr_get_commit_message.outputs.pr_commit_message }}
      - name: "[Pull Request] Get commit message"
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: |
          if git log --format=%B -n 1 HEAD^2|head -n 1 | grep -q 'release'; then
            git log --format=%B -n 1 HEAD^2|head -n 1
            COMMIT_MSG=$(git log --format=%B -n 1 HEAD^2|head -n 1)
            echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
          fi

    # Finally we want to make the commit message available to other jobs. This can be done with job-level outputs
    # However as we do not know whether the commit message was set in Push or Pull Request event we need to do some
    # bash magic to resolve the one or the other
    #
    # For **Pull Request** events this will resolve to something like "$( [ -z "commit message pr" ] && echo "" || echo "commit message pr" )" which then resolves to just "commit message pr"
    #
    # For **Push** events this will resolve to something like "$( [ -z "" ] && echo "commit message push"  || echo "" )" which then resolves to just "commit message push"
    outputs:
      commit_message: ${{ env.COMMIT_MSG }}

  ##########################################
  # Push the built artifact to Docker Hub  #
  ##########################################
  artifact_publish:
    name: Publish the Docker Image
    runs-on: [self-hosted, mega-runner]
    if: "contains(needs.isRelease.outputs.commit_message, 'release')"
    needs: [isRelease]
    steps:
      - name: Docker Tag
        id: docker_tag
        run: |
          if [[ "${{ env.IMAGE_VERSION }}" != "" ]]; then
            echo "Tagging image with Image Version: ${{ env.IMAGE_VERSION }}"
            docker tag ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}} ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_VERSION }}
          fi
          echo "Tagging image with Image Commit ID: ${{ github.sha }}"
          docker tag ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}} ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ github.sha }}
          echo "Tagging image with Image Run Number: ${{ github.run_number }}"
          docker tag ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}} ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ github.run_number }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker Push
        id: docker_push
        run: |
          if [[ "${{ env.IMAGE_VERSION }}" != "" ]]; then
            docker push ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_VERSION }}
          fi
          docker push ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ github.sha }}
          docker push ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:latest
          docker push ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ github.run_number }}

  #################################
  # Update manifest in Infra repo #
  #################################
  update_manifest:
    name: Update the manifests
    runs-on: ubuntu-latest
    needs: artifact_publish
    steps:
      - uses: actions/checkout@v2
        with:
          repository: "5ire-org/5ire-infrastructure"
          token: "${{ secrets.GITHUB_TOKEN }}"
          ssh-key: "${{ secrets.DEPLOY_KEY }}"
          ref: "develop"

      - name: Update the manifest files - local
        run: |
          for manifest in ${{ github.workspace }}/argocd-charts/5irechain/manifests/testnet/bootnodes/*/*; do
            sed -i "s|5irechain/node-5ire.*|5irechain/node-5ire:${{ github.run_number }}|g" "$manifest";
          done

      - name: Update the manifest files - remote
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: "develop"
          commit_message: "update ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME}}:${{ github.run_number }} image for ${{ github.repository }} manifest"
          commit_options: "--signoff"
          file_pattern: "*.yaml"
          commit_user_name: GitHub Actions Bot
          commit_user_email: bot@5ire.org
          commit_author: 5ire Bot <bot@5ire.org>

  ###########################################
  # Send Build status notification on Slack #
  ###########################################

  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [clippy_check, update_manifest]
    steps:
      - name: Get Workflow Conclusion
        run: |
          result='#00FF00'
          conclusion=$(curl -s -u 5irebot:${{ secrets.BOT_GITHUB_ACCESS_TOKEN }} "https://api.github.com/repos/5ire-org/${{ github.repository }}/actions/workflows/ci.yml/runs" | jq -r '.workflow_runs[0].conclusion')
          if [[ "$conslusion" == "failure" ]]; then
            result='#FF0000'
          fi
          echo "RESULT=$result" >> $GITHUB_ENV

      - name: Notify on Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: ci_updates
          SLACK_COLOR: ${{ env.RESULT }}
          SLACK_ICON: https://github.com/5ire-org.png?size=48
          SLACK_TITLE: ":octocat:"
          SLACK_USERNAME: "Github Action Bot"
          SLACK_FOOTER: "GitHub Action Notification for ${{ github.repository }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
